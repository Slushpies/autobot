{
  "name": "mineflayer-navigate",
  "version": "0.0.9",
  "description": "mineflayer plugin which adds 3d pathfinding",
  "main": "index.js",
  "devDependencies": {
    "mineflayer": "0.0.18"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/superjoe30/mineflayer-navigator.git"
  },
  "keywords": [
    "mineflayer",
    "minecraft",
    "bot",
    "path",
    "finding",
    "navigation"
  ],
  "author": {
    "name": "Andrew Kelley"
  },
  "license": "BSD",
  "dependencies": {
    "a-star": "~0.1.0"
  },
  "readme": "# mineflayer-navigate\n\nA library to help your mineflayer bot navigate around the 3D world using\nthe A* algorithm.\n\nSee [https://github.com/superjoe30/mineflayer/](https://github.com/superjoe30/mineflayer/)\n\n[YouTube Demo](http://www.youtube.com/watch?v=O6lQdmRz8eE)\n\n## Usage\n\n```js\nvar mineflayer = require('mineflayer');\nvar navigatePlugin = require('mineflayer-navigate')(mineflayer);\nvar bot = mineflayer.createBot({ username: 'Player' });\n// install the plugin\nnavigatePlugin(bot);\n// optional configuration\nbot.navigate.blocksToAvoid[132] = true; // avoid tripwire\nbot.navigate.blocksToAvoid[59] = false; // ok to trample crops\nbot.navigate.on('pathFound', function (path) {\n  bot.chat(\"found path. I can get there in \" + path.length + \" moves.\");\n});\nbot.navigate.on('cannotFind', function (closestPath) {\n  bot.chat(\"unable to find path. getting as close as possible\");\n  bot.navigate.walk(closestPath);\n});\nbot.navigate.on('arrived', function () {\n  bot.chat(\"I have arrived\");\n});\nbot.navigate.on('interrupted', function() {\n  bot.chat(\"stopping\");\n});\nbot.on('chat', function(username, message) {\n  // navigate to whoever talks\n  if (username === bot.username) return;\n  var target = bot.players[username].entity;\n  if (message === 'come') {\n    bot.navigate.to(target.position);\n  } else if (message === 'stop') {\n    bot.navigate.stop();\n  }\n});\n```\n\n## Documentation\n\n### bot.navigate.to(point, options)\n\nFinds a path to the specified location and goes there.\n\n * `point` - the block you want your feet to be standing on\n * `options` - See `bot.navigate.findPathSync`\n\n#### event \"pathPartFound\" (path)\n\nEmitted from `bot.navigate` when a partial path is found. `path` is an array\nof nodes.\n\n#### event \"pathFound\" (path)\n\nEmitted from `bot.navigate` when a complete path is found. `path` is an array\nof nodes.\n\n#### event \"cannotFind\" (closestPoint)\n\nEmitted when a path cannot be found.\n\n * `closestPoint` - a `vec3` instance - the closest point that you *could*\n   navigate to.\n\n#### event \"arrived\"\n\nEmitted when the destination is reached.\n\n#### event \"stop\"\n\nEmitted when navigation has been aborted.\n\n\n### bot.navigate.stop()\n\nAborts an in progress navigation job.\n\n### bot.navigate.findPathSync(end, [options])\n\nFinds a path to `end`. Can be used to see if it is possible to navigate to a\nparticular point.\n\nReturns an object that looks like:\n\n```js\n{\n  status: 'success', // one of ['success', 'noPath', 'timeout', 'tooFar']\n  path: [startPoint, point1, point2, ..., endPoint],\n}\n```\n\nThe value of `status` has several meanings:\n\n * `success` - `path` is an array of points that can be passed to `walk()`.\n * `noPath` - there is no path to `end`. Try a larger `endRadius`. `path`\n   is the path to the closest reachable point to end.\n * `timeout` - no path could be found in the allotted time. Try a larger\n   `endRadius` or `timeout`. `path` is the path to the closest reachable\n    point to end that could be found in the allotted time.\n * `tooFar` - `end` is too far away, so `path` contains the path to walk 100\n   meters in the general direction of `end`.\n\nParameters:\n\n * `end` - the block you want your feet to be standing on\n * `options` - optional parameters which come with sensible defaults\n   - `isEnd` - function(node) - passed on to the A* library. `node.point` is\n     a vec3 instance.\n   - `endRadius` - used for default `isEnd`. Effectively defaults to 0.\n   - `timeout` - passed on to the A* library. Default 10 seconds.\n   - `tooFarThreshold` - if `end` is greater than `tooFarThreshold`, this\n     function will search instead for a path to walk 100 meters in the general\n     direction of end.\n\n### bot.navigate.walk(path, [callback])\n\n*Note: does not emit events*\n\nWalks the bot along the path and calls the callback function when it has\narrived.\n\nCall `bot.navigate.stop()` to interrupt walking.\n\n * `path` - array of points to be navigated.\n * `callback(stopReason)` - (optional) - called when the bot has arrived.\n   `stopReason` can be: ['obstructed', 'arrived', 'interrupted']\n\n## History\n\n### 0.0.9\n\n * don't emit `arrived` twice. (thanks Benjamin Grosse)\n\n### 0.0.8\n\n * walk: detect being obstructed and call callback with `'obstructed'`\n   `stopReason` when it happens.\n\n### 0.0.7\n\n * walk: callback is still called if `bot.navigate.stop()` is called\n   elsewhere. Also it now has a `stopReason` argument.\n\n### 0.0.6\n\n * fix default `endRadius` too low (thanks vogonistic)\n\n### 0.0.5\n\n * recommended API is now callback based (thanks vogonistic)\n * add `bot.navigate.findPathSync(end, [options])`\n * add `bot.navigate.walk(path, [callblack])`\n\n### 0.0.4\n\n * add 'interrupted' event\n\n### 0.0.3\n\n * fix bot looking at its feet while walking\n * possible speed improvement by using native array methods\n * `cannotFind` event now has `closestPoint` parameter, the closest point it\n   *could* get to\n * `bot.navigate.blocksToAvoid` is a map of block id to boolean value which\n   tells whether to avoid the block. comes with sensible defaults like\n   avoiding fire and crops.\n\n### 0.0.2\n\n * fix pathfinding very far away\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/superjoe30/mineflayer-navigator/issues"
  },
  "_id": "mineflayer-navigate@0.0.9",
  "dist": {
    "shasum": "2726f23e9f9d9cb6078d3cf78d0c0f07ceec33f9",
    "tarball": "https://registry.npmjs.org/mineflayer-navigate/-/mineflayer-navigate-0.0.9.tgz"
  },
  "_from": "mineflayer-navigate@>=0.0.8 <0.1.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "superjoe",
    "email": "superjoe30@gmail.com"
  },
  "maintainers": [
    {
      "name": "superjoe",
      "email": "superjoe30@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "2726f23e9f9d9cb6078d3cf78d0c0f07ceec33f9",
  "_resolved": "https://registry.npmjs.org/mineflayer-navigate/-/mineflayer-navigate-0.0.9.tgz",
  "homepage": "https://github.com/superjoe30/mineflayer-navigator#readme"
}
