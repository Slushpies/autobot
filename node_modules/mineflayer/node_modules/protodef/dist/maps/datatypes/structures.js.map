{"version":3,"sources":["datatypes/structures.js"],"names":[],"mappings":"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","file":"datatypes/structures.js","sourcesContent":["var { getField, getCount, sendCount, calcCount, tryDoc } = require(\"../utils\");\n\nmodule.exports = {\n  'array': [readArray, writeArray, sizeOfArray],\n  'count': [readCount, writeCount, sizeOfCount],\n  'container': [readContainer, writeContainer, sizeOfContainer]\n};\n\nfunction readArray(buffer, offset, typeArgs, rootNode) {\n  var results = {\n    value: [],\n    size: 0\n  };\n  var value;\n  var { count, size } = getCount.call(this, buffer, offset, typeArgs, rootNode);\n  offset += size;\n  results.size += size;\n  for(var i = 0; i < count; i++) {\n    ({size,value}=tryDoc(() => this.read(buffer, offset, typeArgs.type, rootNode), i));\n    results.size += size;\n    offset += size;\n    results.value.push(value);\n  }\n  return results;\n}\n\nfunction writeArray(value, buffer, offset, typeArgs, rootNode) {\n  offset = sendCount.call(this, value.length, buffer, offset, typeArgs, rootNode);\n  return value.reduce((offset,v,index) =>tryDoc(() => this.write(v, buffer, offset, typeArgs.type, rootNode),index),offset);\n}\n\nfunction sizeOfArray(value, typeArgs, rootNode) {\n  var size = calcCount.call(this, value.length, typeArgs, rootNode);\n  size = value.reduce((size,v,index) =>tryDoc(() => size+this.sizeOf(v, typeArgs.type, rootNode), index),size);\n  return size;\n}\n\n\nfunction readContainer(buffer, offset, typeArgs, context) {\n  var results = {\n    value: { \"..\": context },\n    size: 0\n  };\n  typeArgs.forEach(({type,name,anon}) => {\n    tryDoc(() => {\n      var readResults = this.read(buffer, offset, type, results.value);\n      results.size += readResults.size;\n      offset += readResults.size;\n      if (anon) {\n        if(readResults.value !== undefined) Object.keys(readResults.value).forEach(function(key) {\n          results.value[key] = readResults.value[key];\n        });\n      } else\n        results.value[name] = readResults.value;\n    }, name ? name : \"unknown\");\n  });\n  delete results.value[\"..\"];\n  return results;\n}\n\nfunction writeContainer(value, buffer, offset, typeArgs, context) {\n  value[\"..\"] = context;\n  offset=typeArgs.reduce((offset,{type,name,anon}) =>\n    tryDoc(() => this.write(anon ? value : value[name], buffer, offset, type, value),name ?  name : \"unknown\"),offset);\n  delete value[\"..\"];\n  return offset;\n}\n\nfunction sizeOfContainer(value, typeArgs, context) {\n  value[\"..\"] = context;\n  var size = typeArgs.reduce((size,{type,name,anon}) =>\n    size + tryDoc(() => this.sizeOf(anon ? value : value[name], type, value), name ? name : \"unknown\"),0);\n  delete value[\"..\"];\n  return size;\n}\n\nfunction readCount(buffer, offset, {type}, rootNode) {\n  return this.read(buffer, offset, type, rootNode);\n}\n\nfunction writeCount(value, buffer, offset, {countFor,type}, rootNode) {\n  // Actually gets the required field, and writes its length. Value is unused.\n  // TODO : a bit hackityhack.\n  return this.write(getField(countFor, rootNode).length, buffer, offset, type, rootNode);\n}\n\nfunction sizeOfCount(value, {countFor,type}, rootNode) {\n  // TODO : should I use value or getField().length ?\n  return this.sizeOf(getField(countFor, rootNode).length, type, rootNode);\n}\n"],"sourceRoot":"/source/"}