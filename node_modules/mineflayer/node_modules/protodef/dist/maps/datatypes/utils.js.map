{"version":3,"sources":["datatypes/utils.js"],"names":[],"mappings":"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","file":"datatypes/utils.js","sourcesContent":["var assert = require('assert');\n\nvar { getField, getCount, sendCount, calcCount, tryDoc, PartialReadError } = require(\"../utils\");\n\nmodule.exports = {\n  'varint': [readVarInt, writeVarInt, sizeOfVarInt],\n  'bool': [readBool, writeBool, 1],\n  'pstring': [readPString, writePString, sizeOfPString],\n  'buffer': [readBuffer, writeBuffer, sizeOfBuffer],\n  'void': [readVoid, writeVoid, 0],\n  'bitfield': [readBitField, writeBitField, sizeOfBitField],\n  'cstring': [readCString, writeCString, sizeOfCString],\n  'mapper':[readMapper,writeMapper,sizeOfMapper]\n};\n\nfunction readMapper(buffer,offset,{type,mappings},rootNode)\n{\n  var {size,value}=this.read(buffer, offset, type, rootNode);\n  var mappedValue=null;\n  var keys=Object.keys(mappings);\n  for(var i=0;i<keys.length;i++) {\n    if(keys[i]==value) {\n      mappedValue = mappings[keys[i]];\n      break;\n    }\n  }\n  if(mappedValue==null) throw new Error(value+\" is not in the mappings value\");\n  return {\n    size:size,\n    value:mappedValue\n  };\n}\n\nfunction writeMapper(value,buffer,offset,{type,mappings},rootNode)\n{\n  var keys=Object.keys(mappings);\n  var mappedValue=null;\n  for(var i=0;i<keys.length;i++) {\n    if(mappings[keys[i]]==value) {\n      mappedValue = keys[i];\n      break;\n    }\n  }\n  if(mappedValue==null) throw new Error(value+\" is not in the mappings value\");\n  return this.write(mappedValue,buffer,offset,type,rootNode);\n}\n\nfunction sizeOfMapper(value,{type,mappings},rootNode)\n{\n  var keys=Object.keys(mappings);\n  var mappedValue=null;\n  for(var i=0;i<keys.length;i++) {\n    if(mappings[keys[i]]==value) {\n      mappedValue = keys[i];\n      break;\n    }\n  }\n  if(mappedValue==null) throw new Error(value+\" is not in the mappings value\");\n  return this.sizeOf(mappedValue,type,rootNode);\n}\n\nfunction readVarInt(buffer, offset) {\n  var result = 0;\n  var shift = 0;\n  var cursor = offset;\n\n  while(true) {\n    if(cursor + 1 > buffer.length)\n      throw new PartialReadError();\n    var b = buffer.readUInt8(cursor);\n    result |= ((b & 0x7f) << shift); // Add the bits to our number, except MSB\n    cursor++;\n    if(!(b & 0x80)) { // If the MSB is not set, we return the number\n      return {\n        value: result,\n        size: cursor - offset\n      };\n    }\n    shift += 7; // we only have 7 bits, MSB being the return-trigger\n    assert.ok(shift < 64, \"varint is too big\"); // Make sure our shift don't overflow.\n  }\n}\n\nfunction sizeOfVarInt(value) {\n  var cursor = 0;\n  while(value & ~0x7F) {\n    value >>>= 7;\n    cursor++;\n  }\n  return cursor + 1;\n}\n\nfunction writeVarInt(value, buffer, offset) {\n  var cursor = 0;\n  while(value & ~0x7F) {\n    buffer.writeUInt8((value & 0xFF) | 0x80, offset + cursor);\n    cursor++;\n    value >>>= 7;\n  }\n  buffer.writeUInt8(value, offset + cursor);\n  return offset + cursor + 1;\n}\n\n\nfunction readPString(buffer, offset, typeArgs,rootNode) {\n  var { size, count } = getCount.call(this, buffer, offset, typeArgs, rootNode);\n  var cursor = offset + size;\n  var strEnd = cursor + count;\n  if(strEnd > buffer.length) throw new PartialReadError(\"Missing characters in string, found size is \"+buffer.length+\n    \" expected size was \"+strEnd);\n\n  return {\n    value: buffer.toString('utf8', cursor, strEnd),\n    size: strEnd - offset\n  };\n}\n\nfunction writePString(value, buffer, offset, typeArgs,rootNode) {\n  var length = Buffer.byteLength(value, 'utf8');\n  offset = sendCount.call(this, length, buffer, offset, typeArgs, rootNode);\n  buffer.write(value, offset, length, 'utf8');\n  return offset + length;\n}\n\n\nfunction sizeOfPString(value, typeArgs,rootNode) {\n  var length = Buffer.byteLength(value, 'utf8');\n  var size = calcCount.call(this, length, typeArgs, rootNode);\n  return size + length;\n}\n\nfunction readBool(buffer, offset) {\n  if(offset + 1 > buffer.length) throw new PartialReadError();\n  var value = buffer.readInt8(offset);\n  return {\n    value: !!value,\n    size: 1\n  };\n}\n\nfunction writeBool(value, buffer, offset) {\n  buffer.writeInt8(+value, offset);\n  return offset + 1;\n}\n\n\nfunction readBuffer(buffer, offset, typeArgs, rootNode) {\n  var { size, count } = getCount.call(this, buffer, offset, typeArgs, rootNode);\n  offset += size;\n  if(offset+count > buffer.length) throw new PartialReadError();\n  return {\n    value: buffer.slice(offset, offset + count),\n    size: size + count\n  };\n}\n\nfunction writeBuffer(value, buffer, offset, typeArgs, rootNode) {\n  offset = sendCount.call(this, value.length, buffer, offset, typeArgs, rootNode);\n  value.copy(buffer, offset);\n  return offset + value.length;\n}\n\nfunction sizeOfBuffer(value, typeArgs, rootNode) {\n  var size = calcCount.call(this, value.length, typeArgs, rootNode);\n  return size + value.length;\n}\n\nfunction readVoid() {\n  return {\n    value: undefined,\n    size: 0\n  };\n}\n\nfunction writeVoid(value, buffer, offset) {\n  return offset;\n}\n\nfunction generateBitMask(n) {\n  return (1 << n) - 1;\n}\n\nfunction readBitField(buffer, offset, typeArgs) {\n  var beginOffset = offset;\n  var curVal = null;\n  var bits = 0;\n  var results = {};\n  results.value = typeArgs.reduce(function(acc, {size,signed,name}) {\n    var currentSize = size;\n    var val = 0;\n    while (currentSize > 0) {\n      if (bits == 0) {\n        if(buffer.length<offset+1)\n          throw new PartialReadError();\n        curVal = buffer[offset++];\n        bits = 8;\n      }\n      var bitsToRead = Math.min(currentSize, bits);\n      val = (val << bitsToRead) | (curVal & generateBitMask(bits)) >> (bits - bitsToRead);\n      bits -= bitsToRead;\n      currentSize -= bitsToRead;\n    }\n    if (signed && val >= 1 << (size - 1))\n      val -= 1 << size;\n    acc[name] = val;\n    return acc;\n  }, {});\n  results.size = offset - beginOffset;\n  return results;\n}\nfunction writeBitField(value, buffer, offset, typeArgs) {\n  var toWrite = 0;\n  var bits = 0;\n  typeArgs.forEach(function({size,signed,name}) {\n    var val = value[name];\n    if ((!signed && val < 0) || (signed && val < -(1 << (size - 1))))\n      throw new Error(value + \" < \" + signed ? (-(1 << (size - 1))) : 0);\n    else if ((!signed && val >= 1 << size)\n        || (signed && val >= (1 << (size - 1)) - 1))\n      throw new Error(value + \" >= \" + signed ? (1 << size) : ((1 << (size - 1)) - 1));\n    while (size > 0) {\n      var writeBits = Math.min(8 - bits, size);\n      toWrite = toWrite << writeBits |\n        ((val >> (size - writeBits)) & generateBitMask(writeBits));\n      size -= writeBits;\n      bits += writeBits;\n      if (bits === 8) {\n        buffer[offset++] = toWrite;\n        bits = 0;\n        toWrite = 0;\n      }\n    }\n  });\n  if (bits != 0)\n    buffer[offset++] = toWrite << (8 - bits);\n  return offset;\n}\n\nfunction sizeOfBitField(value, typeArgs) {\n  return Math.ceil(typeArgs.reduce(function(acc, {size}) {\n    return acc + size;\n  }, 0) / 8);\n}\n\nfunction readCString(buffer, offset) {\n  var size=0;\n  while (offset+size < buffer.length && buffer[offset+size] != 0x00)\n    size++;\n  if (buffer.length<offset+size+1)\n    throw new PartialReadError();\n\n  return {\n    value:buffer.toString('utf8', offset, offset+size),\n    size:size+1\n  };\n}\n\nfunction writeCString(value, buffer, offset) {\n  var length = Buffer.byteLength(value, 'utf8');\n  buffer.write(value, offset,length,'utf8');\n  offset += length;\n  buffer.writeInt8(0x00, offset);\n  return offset + 1;\n}\n\nfunction sizeOfCString(value) {\n  var length = Buffer.byteLength(value, 'utf8');\n  return length + 1;\n}\n"],"sourceRoot":"/source/"}