{"version":3,"sources":["serializer.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAI,YAAY,QAAQ,iBAAR,EAA2B,SAA3C;;eAC0B,QAAQ,SAAR,C;;IAApB,gB,YAAA,gB;;IAEA,U;;;AACJ,sBAAY,KAAZ,EAAkB,QAAlB,EAA4B;AAAA;;AAAA,8FACpB,EAAE,oBAAoB,IAAtB,EADoB;;AAE1B,UAAK,KAAL,GAAW,KAAX;AACA,UAAK,QAAL,GAAc,QAAd;AACA,UAAK,KAAL,GAAW,IAAI,MAAJ,CAAW,CAAX,CAAX;AAJ0B;AAK3B;;;;uCAEkB,M,EAAQ;AACzB,aAAO,KAAK,KAAL,CAAW,kBAAX,CAA8B,KAAK,QAAnC,EAA4C,MAA5C,CAAP;AACD;;;+BAEU,K,EAAO,G,EAAK,E,EAAI;AACzB,UAAI,YAAJ;AACA,UAAI;AACF,cAAM,KAAK,kBAAL,CAAwB,KAAxB,CAAN;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,eAAO,GAAG,CAAH,CAAP;AACD;AACD,WAAK,IAAL,CAAU,GAAV;AACA,aAAO,IAAP;AACD;;;;EArBsB,S;;IAwBnB,M;;;AACJ,kBAAY,KAAZ,EAAkB,QAAlB,EAA4B;AAAA;;AAAA,2FACpB,EAAE,oBAAoB,IAAtB,EADoB;;AAE1B,WAAK,KAAL,GAAW,KAAX;AACA,WAAK,QAAL,GAAc,QAAd;AACA,WAAK,KAAL,GAAW,IAAI,MAAJ,CAAW,CAAX,CAAX;AAJ0B;AAK3B;;;;sCAEiB,M,EAAQ;AACxB,aAAO,KAAK,KAAL,CAAW,iBAAX,CAA6B,KAAK,QAAlC,EAA2C,MAA3C,CAAP;AACD;;;+BAEU,K,EAAO,G,EAAK,E,EAAI;AACzB,WAAK,KAAL,GAAa,OAAO,MAAP,CAAc,CAAC,KAAK,KAAN,EAAa,KAAb,CAAd,CAAb;AACA,aAAM,IAAN,EAAY;AACV,YAAI,eAAJ;AACA,YAAI;AACF,mBAAS,KAAK,iBAAL,CAAuB,KAAK,KAA5B,CAAT;AACD,SAFD,CAGA,OAAO,CAAP,EAAU;AACR,cAAI,EAAE,gBAAN,EACE,OAAO,IAAP,CADF,KAEK;AACH,cAAE,MAAF,GAAS,KAAK,KAAd;AACA,iBAAK,KAAL,GAAW,IAAI,MAAJ,CAAW,CAAX,CAAX;AACA,mBAAO,GAAG,CAAH,CAAP;AACD;AACF;;AAED,aAAK,IAAL,CAAU,MAAV;AACA,aAAK,KAAL,GAAW,KAAK,KAAL,CAAW,KAAX,CAAiB,OAAO,QAAP,CAAgB,IAAjC,CAAX;AACD;AACF;;;;EAhCkB,S;;AAmCrB,OAAO,OAAP,GAAe;AACb,cAAW,UADE;AAEb,UAAO;AAFM,CAAf","file":"serializer.js","sourcesContent":["var Transform = require(\"readable-stream\").Transform;\nvar { PartialReadError} = require('./utils');\n\nclass Serializer extends Transform {\n  constructor(proto,mainType) {\n    super({ writableObjectMode: true });\n    this.proto=proto;\n    this.mainType=mainType;\n    this.queue=new Buffer(0);\n  }\n\n  createPacketBuffer(packet) {\n    return this.proto.createPacketBuffer(this.mainType,packet);\n  }\n\n  _transform(chunk, enc, cb) {\n    let buf;\n    try {\n      buf = this.createPacketBuffer(chunk);\n    } catch (e) {\n      return cb(e);\n    }\n    this.push(buf);\n    return cb();\n  }\n}\n\nclass Parser extends Transform {\n  constructor(proto,mainType) {\n    super({ readableObjectMode: true });\n    this.proto=proto;\n    this.mainType=mainType;\n    this.queue=new Buffer(0);\n  }\n\n  parsePacketBuffer(buffer) {\n    return this.proto.parsePacketBuffer(this.mainType,buffer);\n  }\n\n  _transform(chunk, enc, cb) {\n    this.queue = Buffer.concat([this.queue, chunk]);\n    while(true) {\n      let packet;\n      try {\n        packet = this.parsePacketBuffer(this.queue);\n      }\n      catch (e) {\n        if (e.partialReadError)\n          return cb();\n        else {\n          e.buffer=this.queue;\n          this.queue=new Buffer(0);\n          return cb(e);\n        }\n      }\n\n      this.push(packet);\n      this.queue=this.queue.slice(packet.metadata.size);\n    }\n  }\n}\n\nmodule.exports={\n  Serializer:Serializer,\n  Parser:Parser\n};"],"sourceRoot":"/source/"}