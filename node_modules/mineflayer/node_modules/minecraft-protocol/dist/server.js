'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var net = require('net');
var EventEmitter = require('events').EventEmitter;
var Client = require('./client');
var states = require("./states");

var Server = function (_EventEmitter) {
  _inherits(Server, _EventEmitter);

  function Server(version, customPackets) {
    _classCallCheck(this, Server);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Server).call(this));

    _this.version = version;
    _this.socketServer = null;
    _this.cipher = null;
    _this.decipher = null;
    _this.clients = {};
    _this.customPackets = customPackets;
    return _this;
  }

  _createClass(Server, [{
    key: 'listen',
    value: function listen(port, host) {
      var _this2 = this;

      var self = this;
      var nextId = 0;
      self.socketServer = net.createServer();
      self.socketServer.on('connection', function (socket) {
        var client = new Client(true, _this2.version, _this2.customPackets);
        client._end = client.end;
        client.end = function end(endReason) {
          endReason = '{"text":"' + endReason + '"}';
          if (client.state === states.PLAY) {
            client.write('kick_disconnect', { reason: endReason });
          } else if (client.state === states.LOGIN) {
            client.write('disconnect', { reason: endReason });
          }
          client._end(endReason);
        };
        client.id = nextId++;
        self.clients[client.id] = client;
        client.on('end', function () {
          delete self.clients[client.id];
        });
        client.setSocket(socket);
        self.emit('connection', client);
      });
      self.socketServer.on('error', function (err) {
        self.emit('error', err);
      });
      self.socketServer.on('close', function () {
        self.emit('close');
      });
      self.socketServer.on('listening', function () {
        self.emit('listening');
      });
      self.socketServer.listen(port, host);
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      Object.keys(this.clients).forEach(function (clientId) {
        var client = _this3.clients[clientId];
        client.end('ServerShutdown');
      });
      this.socketServer.close();
    }
  }]);

  return Server;
}(EventEmitter);

module.exports = Server;
//# sourceMappingURL=maps/server.js.map
