'use strict';

var ProtoDef = require("protodef").ProtoDef;
var Serializer = require("protodef").Serializer;
var Parser = require("protodef").Parser;

var minecraft = require("../datatypes/minecraft");
var states = require("../states");
var merge = require("lodash.merge");
var get = require("lodash.get");

function recursiveAddTypes(protocol, protocolData, path) {
  if (protocolData === undefined) return;
  if (protocolData.types) protocol.addTypes(protocolData.types);
  recursiveAddTypes(protocol, get(protocolData, path.shift()), path);
}

function createProtocol(state, direction, version, customPackets) {
  var proto = new ProtoDef();
  proto.addTypes(minecraft);
  var mcData = require("minecraft-data")(version);
  recursiveAddTypes(proto, merge(mcData.protocol, get(customPackets, [mcData.version.majorVersion])), [state, direction]);
  return proto;
}

function createSerializer() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$state = _ref.state;
  var state = _ref$state === undefined ? states.HANDSHAKING : _ref$state;
  var _ref$isServer = _ref.isServer;
  var isServer = _ref$isServer === undefined ? false : _ref$isServer;
  var version = _ref.version;
  var customPackets = _ref.customPackets;

  return new Serializer(createProtocol(state, !isServer ? "toServer" : "toClient", version, customPackets), "packet");
}

function createDeserializer() {
  var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref2$state = _ref2.state;
  var state = _ref2$state === undefined ? states.HANDSHAKING : _ref2$state;
  var _ref2$isServer = _ref2.isServer;
  var isServer = _ref2$isServer === undefined ? false : _ref2$isServer;
  var version = _ref2.version;
  var customPackets = _ref2.customPackets;

  return new Parser(createProtocol(state, isServer ? "toServer" : "toClient", version, customPackets), "packet");
}

module.exports = {
  createSerializer: createSerializer,
  createDeserializer: createDeserializer
};
//# sourceMappingURL=../maps/transforms/serializer.js.map
