'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require$types$varint = _slicedToArray(require("protodef").types.varint, 3);

var readVarInt = _require$types$varint[0];
var writeVarInt = _require$types$varint[1];
var sizeOfVarInt = _require$types$varint[2];

var zlib = require("zlib");
var Transform = require("readable-stream").Transform;

module.exports.createCompressor = function (threshold) {
  return new Compressor(threshold);
};

module.exports.createDecompressor = function (threshold) {
  return new Decompressor(threshold);
};

var Compressor = function (_Transform) {
  _inherits(Compressor, _Transform);

  function Compressor() {
    var compressionThreshold = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

    _classCallCheck(this, Compressor);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Compressor).call(this));

    _this.compressionThreshold = compressionThreshold;
    return _this;
  }

  _createClass(Compressor, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var _this2 = this;

      if (chunk.length >= this.compressionThreshold) {
        zlib.deflate(chunk, function (err, newChunk) {
          if (err) return cb(err);
          var buf = new Buffer(sizeOfVarInt(chunk.length) + newChunk.length);
          var offset = writeVarInt(chunk.length, buf, 0);
          newChunk.copy(buf, offset);
          _this2.push(buf);
          return cb();
        });
      } else {
        var buf = new Buffer(sizeOfVarInt(0) + chunk.length);
        var offset = writeVarInt(0, buf, 0);
        chunk.copy(buf, offset);
        this.push(buf);
        return cb();
      }
    }
  }]);

  return Compressor;
}(Transform);

var Decompressor = function (_Transform2) {
  _inherits(Decompressor, _Transform2);

  function Decompressor() {
    var compressionThreshold = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

    _classCallCheck(this, Decompressor);

    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Decompressor).call(this));

    _this3.compressionThreshold = compressionThreshold;
    return _this3;
  }

  _createClass(Decompressor, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var _this4 = this;

      var _readVarInt = readVarInt(chunk, 0);

      var size = _readVarInt.size;
      var value = _readVarInt.value;
      var error = _readVarInt.error;

      if (error) return cb(error);
      if (value === 0) {
        this.push(chunk.slice(size));
        return cb();
      } else {
        zlib.inflate(chunk.slice(size), function (err, newBuf) {
          if (err) return cb(err);
          _this4.push(newBuf);
          return cb();
        });
      }
    }
  }]);

  return Decompressor;
}(Transform);
//# sourceMappingURL=../maps/transforms/compression.js.map
