'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require$types$varint = _slicedToArray(require("protodef").types.varint, 3);

var readVarInt = _require$types$varint[0];
var writeVarInt = _require$types$varint[1];
var sizeOfVarInt = _require$types$varint[2];

var Transform = require("readable-stream").Transform;

module.exports.createSplitter = function () {
  return new Splitter();
};

module.exports.createFramer = function () {
  return new Framer();
};

var Framer = function (_Transform) {
  _inherits(Framer, _Transform);

  function Framer() {
    _classCallCheck(this, Framer);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Framer).call(this));
  }

  _createClass(Framer, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var varIntSize = sizeOfVarInt(chunk.length);
      var buffer = new Buffer(varIntSize + chunk.length);
      writeVarInt(chunk.length, buffer, 0);
      chunk.copy(buffer, varIntSize);
      this.push(buffer);
      return cb();
    }
  }]);

  return Framer;
}(Transform);

var LEGACY_PING_PACKET_ID = 0xfe;

var Splitter = function (_Transform2) {
  _inherits(Splitter, _Transform2);

  function Splitter() {
    _classCallCheck(this, Splitter);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Splitter).call(this));

    _this2.buffer = new Buffer(0);
    _this2.recognizeLegacyPing = false;
    return _this2;
  }

  _createClass(Splitter, [{
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      this.buffer = Buffer.concat([this.buffer, chunk]);

      if (this.recognizeLegacyPing && this.buffer[0] === LEGACY_PING_PACKET_ID) {
        // legacy_server_list_ping packet follows a different protocol format
        // prefix the encoded varint packet id for the deserializer
        var header = new Buffer(sizeOfVarInt(LEGACY_PING_PACKET_ID));
        writeVarInt(LEGACY_PING_PACKET_ID, header, 0);
        var payload = this.buffer.slice(1); // remove 0xfe packet id
        if (payload.length === 0) payload = new Buffer('\0'); // TODO: update minecraft-data to recognize a lone 0xfe, https://github.com/PrismarineJS/minecraft-data/issues/95
        this.push(Buffer.concat([header, payload]));
        return cb();
      }

      var offset = 0;
      var value = void 0,
          size = void 0,
          error = void 0;
      var stop = false;
      try {
        var _readVarInt = readVarInt(this.buffer, offset);

        value = _readVarInt.value;
        size = _readVarInt.size;
        error = _readVarInt.error;
      } catch (e) {
        if (!e.partialReadError) {
          throw e;
        } else stop = true;
      }
      if (!stop) while (this.buffer.length >= offset + size + value) {
        try {
          this.push(this.buffer.slice(offset + size, offset + size + value));
          offset += size + value;

          var _readVarInt2 = readVarInt(this.buffer, offset);

          value = _readVarInt2.value;
          size = _readVarInt2.size;
          error = _readVarInt2.error;
        } catch (e) {
          if (e.partialReadError) {
            break;
          } else throw e;
        }
      }
      this.buffer = this.buffer.slice(offset);
      return cb();
    }
  }]);

  return Splitter;
}(Transform);
//# sourceMappingURL=../maps/transforms/framing.js.map
