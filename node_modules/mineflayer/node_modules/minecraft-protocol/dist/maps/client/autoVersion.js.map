{"version":3,"sources":["client/autoVersion.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,OAAO,QAAQ,SAAR,CAAb;AACA,IAAM,QAAQ,QAAQ,OAAR,EAAiB,oBAAjB,CAAd;AACA,IAAM,SAAS,QAAQ,WAAR,CAAf;AACA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,iBAAiB,QAAQ,gBAAR,CAAvB;;AAEA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB,OAAjB,EAA0B;AACzC,SAAO,YAAP,GAAsB,IAAtB,C;AACA,QAAM,SAAN,EAAgB,QAAQ,IAAxB;AACA,MAAM,cAAc,EAAC,MAAM,QAAQ,IAAf,EAAqB,MAAM,QAAQ,IAAnC,EAApB;;AAEA,OAAK,WAAL,EAAkB,UAAS,GAAT,EAAc,QAAd,EAAwB;AACxC,QAAI,GAAJ,EAAS,MAAM,GAAN,C;AACT,UAAM,eAAN,EAAsB,QAAtB;;AAEA,QAAM,OAAO,SAAS,WAAtB;AACA,UAAM,qBAAN,EAA4B,IAA5B,E;;;;AAIA,QAAM,0BAA0B,SAAS,OAAT,CAAiB,IAAjD,C;AACA,QAAM,kBAAkB,SAAS,OAAT,CAAiB,QAAzC,C;;AAEA,+BAAyB,uBAAzB,oBAA+D,eAA/D;;AAEA,QAAI,yBAAJ;AACA,QAAI,wBAAwB,OAAxB,CAAgC,GAAhC,MAAyC,CAAC,CAA9C,EAAiD;;AAE/C,yBAAmB,wBAAwB,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnB;AACD,KAHD,MAGO;AACL,yBAAmB,uBAAnB;AACD;;AAED,QAAM,cAAc,eAAe,0BAAf,CAA0C,gBAA1C,EAA4D,IAA5D,CAApB;AACA,QAAI,CAAC,WAAL,EAAkB,MAAM,IAAI,KAAJ,4CAAmD,eAAnD,6BAAN;;AAElB,YAAQ,OAAR,GAAkB,gBAAlB;AACA,YAAQ,eAAR,GAA0B,eAA1B;;;AAGA,WAAO,OAAP,GAAiB,gBAAjB;AACA,WAAO,KAAP,GAAe,OAAO,WAAtB;;;AAGA,QAAI,OAAO,gBAAX,EAA6B;AAC3B,aAAO,gBAAP,CAAwB,OAAxB,CAAgC,UAAC,IAAD,EAAU;AACxC,aAAK,QAAL,EAAe,MAAf,EAAuB,OAAvB;AACD,OAFD;AAGD;;;AAGD,WAAO,IAAP,CAAY,iBAAZ;AACD,GAzCD;AA0CA,SAAO,MAAP;AACD,CAhDD","file":"client/autoVersion.js","sourcesContent":["'use strict';\n\nconst ping = require('../ping');\nconst debug = require('debug')('minecraft-protocol');\nconst states = require('../states');\nconst assert = require('assert');\nconst minecraft_data = require('minecraft-data');\n\nmodule.exports = function(client, options) {\n  client.wait_connect = true; // don't let src/client/setProtocol proceed on socket 'connect' until 'connect_allowed'\n  debug('pinging',options.host);\n  const pingOptions = {host: options.host, port: options.port};\n  // TODO: use 0xfe ping instead for better compatibility/performance? https://github.com/deathcap/node-minecraft-ping\n  ping(pingOptions, function(err, response) {\n    if (err) throw err; // hmm\n    debug('ping response',response);\n    // TODO: could also use ping pre-connect to save description, type, max players, etc.\n    const motd = response.description;\n    debug('Server description:',motd); // TODO: save\n\n    // Pass server-reported version to protocol handler\n    // The version string is interpreted by https://github.com/PrismarineJS/node-minecraft-data\n    const brandedMinecraftVersion = response.version.name;        // 1.8.9, 1.7.10\n    const protocolVersion = response.version.protocol;//    47,      5\n\n    debug(`Server version: ${brandedMinecraftVersion}, protocol: ${protocolVersion}`);\n\n    let minecraftVersion;\n    if (brandedMinecraftVersion.indexOf(' ') !== -1) {\n      // Spigot and Glowstone++ prepend their name; strip it off\n      minecraftVersion = brandedMinecraftVersion.split(' ')[1];\n    } else {\n      minecraftVersion = brandedMinecraftVersion;\n    }\n\n    const versionInfo = minecraft_data.versionsByMinecraftVersion[minecraftVersion][\"pc\"];\n    if (!versionInfo) throw new Error(`unsupported/unknown protocol version: ${protocolVersion}, update minecraft-data`);\n\n    options.version = minecraftVersion;\n    options.protocolVersion = protocolVersion;\n\n    // Reinitialize client object with new version TODO: move out of its constructor?\n    client.version = minecraftVersion;\n    client.state = states.HANDSHAKING;\n\n    // Let other plugins such as Forge/FML (modinfo) respond to the ping response\n    if (client.autoVersionHooks) {\n      client.autoVersionHooks.forEach((hook) => {\n        hook(response, client, options);\n      });\n    }\n\n    // Finished configuring client object, let connection proceed\n    client.emit('connect_allowed');\n  });\n  return client;\n};\n"],"sourceRoot":"/source/"}