{"version":3,"sources":["transforms/serializer.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,WAAW,QAAQ,UAAR,EAAoB,QAArC;AACA,IAAM,aAAa,QAAQ,UAAR,EAAoB,UAAvC;AACA,IAAM,SAAS,QAAQ,UAAR,EAAoB,MAAnC;;AAEA,IAAM,YAAY,QAAQ,wBAAR,CAAlB;AACA,IAAM,SAAS,QAAQ,WAAR,CAAf;AACA,IAAM,QAAM,QAAQ,cAAR,CAAZ;AACA,IAAM,MAAI,QAAQ,YAAR,CAAV;;AAEA,SAAS,iBAAT,CAA2B,QAA3B,EAAoC,YAApC,EAAiD,IAAjD,EACA;AACE,MAAG,iBAAe,SAAlB,EACE;AACF,MAAG,aAAa,KAAhB,EACE,SAAS,QAAT,CAAkB,aAAa,KAA/B;AACF,oBAAkB,QAAlB,EAA2B,IAAI,YAAJ,EAAiB,KAAK,KAAL,EAAjB,CAA3B,EAA0D,IAA1D;AACD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAA8B,SAA9B,EAAwC,OAAxC,EAAgD,aAAhD,EACA;AACE,MAAM,QAAQ,IAAI,QAAJ,EAAd;AACA,QAAM,QAAN,CAAe,SAAf;AACA,MAAM,SAAO,QAAQ,gBAAR,EAA0B,OAA1B,CAAb;AACA,oBAAkB,KAAlB,EAAwB,MAAM,OAAO,QAAb,EAAsB,IAAI,aAAJ,EAAkB,CAAC,OAAO,OAAP,CAAe,YAAhB,CAAlB,CAAtB,CAAxB,EAAgG,CAAC,KAAD,EAAO,SAAP,CAAhG;AACA,SAAO,KAAP;AACD;;AAED,SAAS,gBAAT,GACA;AAAA,mEADoG,EACpG;;AAAA,wBAD4B,KAC5B;AAAA,MAD4B,KAC5B,8BADoC,OAAO,WAC3C;AAAA,2BADwD,QACxD;AAAA,MADwD,QACxD,iCADmE,KACnE;AAAA,MAD2E,OAC3E,QAD2E,OAC3E;AAAA,MADmF,aACnF,QADmF,aACnF;;AACE,SAAO,IAAI,UAAJ,CAAe,eAAe,KAAf,EAAqB,CAAC,QAAD,GAAY,UAAZ,GAAyB,UAA9C,EAAyD,OAAzD,EAAiE,aAAjE,CAAf,EAA+F,QAA/F,CAAP;AACD;;AAED,SAAS,kBAAT,GACA;AAAA,oEADqG,EACrG;;AAAA,0BAD8B,KAC9B;AAAA,MAD8B,KAC9B,+BADsC,OAAO,WAC7C;AAAA,6BAD0D,QAC1D;AAAA,MAD0D,QAC1D,kCADqE,KACrE;AAAA,MAD2E,OAC3E,SAD2E,OAC3E;AAAA,MADmF,aACnF,SADmF,aACnF;;AACE,SAAO,IAAI,MAAJ,CAAW,eAAe,KAAf,EAAqB,WAAW,UAAX,GAAwB,UAA7C,EAAwD,OAAxD,EAAgE,aAAhE,CAAX,EAA0F,QAA1F,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB;AACf,oBAAiB,gBADF;AAEf,sBAAmB;AAFJ,CAAjB","file":"transforms/serializer.js","sourcesContent":["'use strict';\n\nconst ProtoDef = require(\"protodef\").ProtoDef;\nconst Serializer = require(\"protodef\").Serializer;\nconst Parser = require(\"protodef\").Parser;\n\nconst minecraft = require(\"../datatypes/minecraft\");\nconst states = require(\"../states\");\nconst merge=require(\"lodash.merge\");\nconst get=require(\"lodash.get\");\n\nfunction recursiveAddTypes(protocol,protocolData,path)\n{\n  if(protocolData===undefined)\n    return;\n  if(protocolData.types)\n    protocol.addTypes(protocolData.types);\n  recursiveAddTypes(protocol,get(protocolData,path.shift()),path);\n}\n\nfunction createProtocol(state,direction,version,customPackets)\n{\n  const proto = new ProtoDef();\n  proto.addTypes(minecraft);\n  const mcData=require(\"minecraft-data\")(version);\n  recursiveAddTypes(proto,merge(mcData.protocol,get(customPackets,[mcData.version.majorVersion])),[state,direction]);\n  return proto;\n}\n\nfunction createSerializer({ state = states.HANDSHAKING, isServer = false , version,customPackets} = {})\n{\n  return new Serializer(createProtocol(state,!isServer ? \"toServer\" : \"toClient\",version,customPackets),\"packet\");\n}\n\nfunction createDeserializer({ state = states.HANDSHAKING, isServer = false,version,customPackets } = {})\n{\n  return new Parser(createProtocol(state,isServer ? \"toServer\" : \"toClient\",version,customPackets),\"packet\");\n}\n\nmodule.exports = {\n  createSerializer:createSerializer,\n  createDeserializer:createDeserializer\n};\n"],"sourceRoot":"/source/"}