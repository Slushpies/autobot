{"version":3,"sources":["transforms/framing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;2CAEgD,QAAQ,UAAR,EAAoB,KAApB,CAA0B,M;;IAAnE,U;IAAY,W;IAAa,Y;;AAChC,IAAM,YAAY,QAAQ,iBAAR,EAA2B,SAA7C;;AAEA,OAAO,OAAP,CAAe,cAAf,GAAgC,YAAW;AACzC,SAAO,IAAI,QAAJ,EAAP;AACD,CAFD;;AAIA,OAAO,OAAP,CAAe,YAAf,GAA8B,YAAW;AACvC,SAAO,IAAI,MAAJ,EAAP;AACD,CAFD;;IAIM,M;;;AACJ,oBAAc;AAAA;;AAAA;AAEb;;;;+BAEU,K,EAAO,G,EAAK,E,EAAI;AACzB,UAAM,aAAW,aAAa,MAAM,MAAnB,CAAjB;AACA,UAAM,SAAS,IAAI,MAAJ,CAAW,aAAa,MAAM,MAA9B,CAAf;AACA,kBAAY,MAAM,MAAlB,EAA0B,MAA1B,EAAkC,CAAlC;AACA,YAAM,IAAN,CAAW,MAAX,EAAmB,UAAnB;AACA,WAAK,IAAL,CAAU,MAAV;AACA,aAAO,IAAP;AACD;;;;EAZkB,S;;AAerB,IAAM,wBAAwB,IAA9B;;IAEM,Q;;;AACJ,sBAAc;AAAA;;AAAA;;AAEZ,WAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,CAAX,CAAd;AACA,WAAK,mBAAL,GAA2B,KAA3B;AAHY;AAIb;;;;+BACU,K,EAAO,G,EAAK,E,EAAI;AACzB,WAAK,MAAL,GAAc,OAAO,MAAP,CAAc,CAAC,KAAK,MAAN,EAAc,KAAd,CAAd,CAAd;;AAEA,UAAI,KAAK,mBAAL,IAA4B,KAAK,MAAL,CAAY,CAAZ,MAAmB,qBAAnD,EAA0E;;;AAGxE,YAAM,SAAS,IAAI,MAAJ,CAAW,aAAa,qBAAb,CAAX,CAAf;AACA,oBAAY,qBAAZ,EAAmC,MAAnC,EAA2C,CAA3C;AACA,YAAI,UAAU,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB,CAAd,C;AACA,YAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B,UAAU,IAAI,MAAJ,CAAW,IAAX,CAAV,C;AAC1B,aAAK,IAAL,CAAU,OAAO,MAAP,CAAc,CAAC,MAAD,EAAS,OAAT,CAAd,CAAV;AACA,eAAO,IAAP;AACD;;AAED,UAAI,SAAS,CAAb;AACA,UAAI,cAAJ;UAAW,aAAX;UAAiB,cAAjB;AACA,UAAI,OAAK,KAAT;AACA,UAAI;AAAA,0BACwB,WAAW,KAAK,MAAhB,EAAwB,MAAxB,CADxB;;AACC,aADD,eACC,KADD;AACQ,YADR,eACQ,IADR;AACc,aADd,eACc,KADd;AAEH,OAFD,CAGA,OAAM,CAAN,EAAS;AACP,YAAG,CAAE,EAAE,gBAAP,EAA0B;AACxB,gBAAM,CAAN;AACD,SAFD,MAIE,OAAK,IAAL;AACH;AACD,UAAG,CAAC,IAAJ,EAAU,OAAO,KAAK,MAAL,CAAY,MAAZ,IAAsB,SAAS,IAAT,GAAgB,KAA7C,EACV;AACE,YAAI;AACF,eAAK,IAAL,CAAU,KAAK,MAAL,CAAY,KAAZ,CAAkB,SAAS,IAA3B,EAAiC,SAAS,IAAT,GAAgB,KAAjD,CAAV;AACA,oBAAU,OAAO,KAAjB;;AAFE,6BAGsB,WAAW,KAAK,MAAhB,EAAwB,MAAxB,CAHtB;;AAGA,eAHA,gBAGA,KAHA;AAGO,cAHP,gBAGO,IAHP;AAGa,eAHb,gBAGa,KAHb;AAIH,SAJD,CAKA,OAAM,CAAN,EAAS;AACP,cAAG,EAAE,gBAAL,EAAuB;AACrB;AACD,WAFD,MAIE,MAAM,CAAN;AACH;AACF;AACD,WAAK,MAAL,GAAc,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,CAAd;AACA,aAAO,IAAP;AACD;;;;EAlDoB,S","file":"transforms/framing.js","sourcesContent":["'use strict';\n\nconst [readVarInt, writeVarInt, sizeOfVarInt] = require(\"protodef\").types.varint;\nconst Transform = require(\"readable-stream\").Transform;\n\nmodule.exports.createSplitter = function() {\n  return new Splitter();\n};\n\nmodule.exports.createFramer = function() {\n  return new Framer();\n};\n\nclass Framer extends Transform {\n  constructor() {\n    super();\n  }\n\n  _transform(chunk, enc, cb) {\n    const varIntSize=sizeOfVarInt(chunk.length);\n    const buffer = new Buffer(varIntSize + chunk.length);\n    writeVarInt(chunk.length, buffer, 0);\n    chunk.copy(buffer, varIntSize);\n    this.push(buffer);\n    return cb();\n  }\n}\n\nconst LEGACY_PING_PACKET_ID = 0xfe;\n\nclass Splitter extends Transform {\n  constructor() {\n    super();\n    this.buffer = new Buffer(0);\n    this.recognizeLegacyPing = false;\n  }\n  _transform(chunk, enc, cb) {\n    this.buffer = Buffer.concat([this.buffer, chunk]);\n\n    if (this.recognizeLegacyPing && this.buffer[0] === LEGACY_PING_PACKET_ID) {\n      // legacy_server_list_ping packet follows a different protocol format\n      // prefix the encoded varint packet id for the deserializer\n      const header = new Buffer(sizeOfVarInt(LEGACY_PING_PACKET_ID));\n      writeVarInt(LEGACY_PING_PACKET_ID, header, 0);\n      let payload = this.buffer.slice(1); // remove 0xfe packet id\n      if (payload.length === 0) payload = new Buffer('\\0'); // TODO: update minecraft-data to recognize a lone 0xfe, https://github.com/PrismarineJS/minecraft-data/issues/95\n      this.push(Buffer.concat([header, payload]));\n      return cb();\n    }\n\n    let offset = 0;\n    let value, size, error;\n    let stop=false;\n    try {\n      ({ value, size, error } = readVarInt(this.buffer, offset));\n    }\n    catch(e) {\n      if(!(e.partialReadError)) {\n        throw e;\n      }\n      else\n        stop=true;\n    }\n    if(!stop) while (this.buffer.length >= offset + size + value)\n    {\n      try {\n        this.push(this.buffer.slice(offset + size, offset + size + value));\n        offset += size + value;\n        ({value, size, error} = readVarInt(this.buffer, offset));\n      }\n      catch(e) {\n        if(e.partialReadError) {\n          break;\n        }\n        else\n          throw e;\n      }\n    }\n    this.buffer = this.buffer.slice(offset);\n    return cb();\n  }\n}\n\n"],"sourceRoot":"/source/"}