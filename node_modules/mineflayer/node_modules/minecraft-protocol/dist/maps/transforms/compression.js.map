{"version":3,"sources":["transforms/compression.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;2CAEgD,QAAQ,UAAR,EAAoB,KAApB,CAA0B,M;;IAAnE,U;IAAY,W;IAAa,Y;;AAChC,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,YAAY,QAAQ,iBAAR,EAA2B,SAA7C;;AAEA,OAAO,OAAP,CAAe,gBAAf,GAAkC,UAAS,SAAT,EAAoB;AACpD,SAAO,IAAI,UAAJ,CAAe,SAAf,CAAP;AACD,CAFD;;AAIA,OAAO,OAAP,CAAe,kBAAf,GAAoC,UAAS,SAAT,EAAoB;AACtD,SAAO,IAAI,YAAJ,CAAiB,SAAjB,CAAP;AACD,CAFD;;IAIM,U;;;AACJ,wBAAuC;AAAA,QAA3B,oBAA2B,yDAAJ,CAAC,CAAG;;AAAA;;AAAA;;AAErC,UAAK,oBAAL,GAA4B,oBAA5B;AAFqC;AAGtC;;;;+BAEU,K,EAAO,G,EAAK,E,EAAI;AAAA;;AACzB,UAAI,MAAM,MAAN,IAAgB,KAAK,oBAAzB,EACA;AACE,aAAK,OAAL,CAAa,KAAb,EAAoB,UAAC,GAAD,EAAM,QAAN,EAAmB;AACrC,cAAI,GAAJ,EACE,OAAO,GAAG,GAAH,CAAP;AACF,cAAM,MAAM,IAAI,MAAJ,CAAW,aAAa,MAAM,MAAnB,IAA6B,SAAS,MAAjD,CAAZ;AACA,cAAM,SAAS,YAAY,MAAM,MAAlB,EAA0B,GAA1B,EAA+B,CAA/B,CAAf;AACA,mBAAS,IAAT,CAAc,GAAd,EAAmB,MAAnB;AACA,iBAAK,IAAL,CAAU,GAAV;AACA,iBAAO,IAAP;AACD,SARD;AASD,OAXD,MAaA;AACE,YAAM,MAAM,IAAI,MAAJ,CAAW,aAAa,CAAb,IAAkB,MAAM,MAAnC,CAAZ;AACA,YAAM,SAAS,YAAY,CAAZ,EAAe,GAAf,EAAoB,CAApB,CAAf;AACA,cAAM,IAAN,CAAW,GAAX,EAAgB,MAAhB;AACA,aAAK,IAAL,CAAU,GAAV;AACA,eAAO,IAAP;AACD;AACF;;;;EA3BsB,S;;IA8BnB,Y;;;AACJ,0BAAuC;AAAA,QAA3B,oBAA2B,yDAAJ,CAAC,CAAG;;AAAA;;AAAA;;AAErC,WAAK,oBAAL,GAA4B,oBAA5B;AAFqC;AAGtC;;;;+BAEU,K,EAAO,G,EAAK,E,EAAI;AAAA;;AAAA,wBACM,WAAW,KAAX,EAAkB,CAAlB,CADN;;AAAA,UACjB,IADiB,eACjB,IADiB;AAAA,UACX,KADW,eACX,KADW;AAAA,UACJ,KADI,eACJ,KADI;;AAEzB,UAAI,KAAJ,EACE,OAAO,GAAG,KAAH,CAAP;AACF,UAAI,UAAU,CAAd,EACA;AACE,aAAK,IAAL,CAAU,MAAM,KAAN,CAAY,IAAZ,CAAV;AACA,eAAO,IAAP;AACD,OAJD,MAMA;AACE,aAAK,OAAL,CAAa,MAAM,KAAN,CAAY,IAAZ,CAAb,EAAgC,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC/C,cAAI,GAAJ,EACE,OAAO,GAAG,GAAH,CAAP;AACF,iBAAK,IAAL,CAAU,MAAV;AACA,iBAAO,IAAP;AACD,SALD;AAMD;AACF;;;;EAxBwB,S","file":"transforms/compression.js","sourcesContent":["'use strict';\n\nconst [readVarInt, writeVarInt, sizeOfVarInt] = require(\"protodef\").types.varint;\nconst zlib = require(\"zlib\");\nconst Transform = require(\"readable-stream\").Transform;\n\nmodule.exports.createCompressor = function(threshold) {\n  return new Compressor(threshold);\n};\n\nmodule.exports.createDecompressor = function(threshold) {\n  return new Decompressor(threshold);\n};\n\nclass Compressor extends Transform {\n  constructor(compressionThreshold = -1) {\n    super();\n    this.compressionThreshold = compressionThreshold;\n  }\n\n  _transform(chunk, enc, cb) {\n    if (chunk.length >= this.compressionThreshold)\n    {\n      zlib.deflate(chunk, (err, newChunk) => {\n        if (err)\n          return cb(err);\n        const buf = new Buffer(sizeOfVarInt(chunk.length) + newChunk.length);\n        const offset = writeVarInt(chunk.length, buf, 0);\n        newChunk.copy(buf, offset);\n        this.push(buf);\n        return cb();\n      });\n    }\n    else\n    {\n      const buf = new Buffer(sizeOfVarInt(0) + chunk.length);\n      const offset = writeVarInt(0, buf, 0);\n      chunk.copy(buf, offset);\n      this.push(buf);\n      return cb();\n    }\n  }\n}\n\nclass Decompressor extends Transform {\n  constructor(compressionThreshold = -1) {\n    super();\n    this.compressionThreshold = compressionThreshold;\n  }\n\n  _transform(chunk, enc, cb) {\n    const { size, value, error } = readVarInt(chunk, 0);\n    if (error)\n      return cb(error);\n    if (value === 0)\n    {\n      this.push(chunk.slice(size));\n      return cb();\n    }\n    else\n    {\n      zlib.inflate(chunk.slice(size), (err, newBuf) => {\n        if (err)\n          return cb(err);\n        this.push(newBuf);\n        return cb();\n      });\n    }\n  }\n}\n"],"sourceRoot":"/source/"}