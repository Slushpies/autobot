{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAEA,IAAM,MAAM,QAAQ,KAAR,CAAZ;AACA,IAAM,eAAe,QAAQ,QAAR,EAAkB,YAAvC;AACA,IAAM,SAAS,QAAQ,UAAR,CAAf;AACA,IAAM,SAAS,QAAQ,UAAR,CAAf;;IAEM,M;;;AAEJ,kBAAY,OAAZ,EAAoB,aAApB,EAAmC;AAAA;;AAAA;;AAEjC,UAAK,OAAL,GAAa,OAAb;AACA,UAAK,YAAL,GAAkB,IAAlB;AACA,UAAK,MAAL,GAAY,IAAZ;AACA,UAAK,QAAL,GAAc,IAAd;AACA,UAAK,OAAL,GAAa,EAAb;AACA,UAAK,aAAL,GAAmB,aAAnB;AAPiC;AAQlC;;;;2BAEM,I,EAAM,I,EAAM;AAAA;;AACjB,UAAM,OAAO,IAAb;AACA,UAAI,SAAS,CAAb;AACA,WAAK,YAAL,GAAoB,IAAI,YAAJ,EAApB;AACA,WAAK,YAAL,CAAkB,EAAlB,CAAqB,YAArB,EAAmC,kBAAU;AAC3C,YAAM,SAAS,IAAI,MAAJ,CAAW,IAAX,EAAgB,OAAK,OAArB,EAA6B,OAAK,aAAlC,CAAf;AACA,eAAO,IAAP,GAAc,OAAO,GAArB;AACA,eAAO,GAAP,GAAa,SAAS,GAAT,CAAa,SAAb,EAAwB;AACnC,sBAAU,cAAY,SAAZ,GAAsB,IAAhC;AACA,cAAG,OAAO,KAAP,KAAiB,OAAO,IAA3B,EAAiC;AAC/B,mBAAO,KAAP,CAAa,iBAAb,EAAgC,EAAC,QAAQ,SAAT,EAAhC;AACD,WAFD,MAEO,IAAG,OAAO,KAAP,KAAiB,OAAO,KAA3B,EAAkC;AACvC,mBAAO,KAAP,CAAa,YAAb,EAA2B,EAAC,QAAQ,SAAT,EAA3B;AACD;AACD,iBAAO,IAAP,CAAY,SAAZ;AACD,SARD;AASA,eAAO,EAAP,GAAY,QAAZ;AACA,aAAK,OAAL,CAAa,OAAO,EAApB,IAA0B,MAA1B;AACA,eAAO,EAAP,CAAU,KAAV,EAAiB,YAAW;AAC1B,iBAAO,KAAK,OAAL,CAAa,OAAO,EAApB,CAAP;AACD,SAFD;AAGA,eAAO,SAAP,CAAiB,MAAjB;AACA,aAAK,IAAL,CAAU,YAAV,EAAwB,MAAxB;AACD,OAnBD;AAoBA,WAAK,YAAL,CAAkB,EAAlB,CAAqB,OAArB,EAA8B,UAAS,GAAT,EAAc;AAC1C,aAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB;AACD,OAFD;AAGA,WAAK,YAAL,CAAkB,EAAlB,CAAqB,OAArB,EAA8B,YAAW;AACvC,aAAK,IAAL,CAAU,OAAV;AACD,OAFD;AAGA,WAAK,YAAL,CAAkB,EAAlB,CAAqB,WAArB,EAAkC,YAAW;AAC3C,aAAK,IAAL,CAAU,WAAV;AACD,OAFD;AAGA,WAAK,YAAL,CAAkB,MAAlB,CAAyB,IAAzB,EAA+B,IAA/B;AACD;;;4BAEO;AAAA;;AACN,aAAO,IAAP,CAAY,KAAK,OAAjB,EAA0B,OAA1B,CAAkC,oBAAY;AAC5C,YAAM,SAAS,OAAK,OAAL,CAAa,QAAb,CAAf;AACA,eAAO,GAAP,CAAW,gBAAX;AACD,OAHD;AAIA,WAAK,YAAL,CAAkB,KAAlB;AACD;;;;EAtDkB,Y;;AAyDrB,OAAO,OAAP,GAAiB,MAAjB","file":"server.js","sourcesContent":["'use strict';\n\nconst net = require('net');\nconst EventEmitter = require('events').EventEmitter;\nconst Client = require('./client');\nconst states = require(\"./states\");\n\nclass Server extends EventEmitter\n{\n  constructor(version,customPackets) {\n    super();\n    this.version=version;\n    this.socketServer=null;\n    this.cipher=null;\n    this.decipher=null;\n    this.clients={};\n    this.customPackets=customPackets;\n  }\n\n  listen(port, host) {\n    const self = this;\n    let nextId = 0;\n    self.socketServer = net.createServer();\n    self.socketServer.on('connection', socket => {\n      const client = new Client(true,this.version,this.customPackets);\n      client._end = client.end;\n      client.end = function end(endReason) {\n        endReason='{\"text\":\"'+endReason+'\"}';\n        if(client.state === states.PLAY) {\n          client.write('kick_disconnect', {reason: endReason});\n        } else if(client.state === states.LOGIN) {\n          client.write('disconnect', {reason: endReason});\n        }\n        client._end(endReason);\n      };\n      client.id = nextId++;\n      self.clients[client.id] = client;\n      client.on('end', function() {\n        delete self.clients[client.id];\n      });\n      client.setSocket(socket);\n      self.emit('connection', client);\n    });\n    self.socketServer.on('error', function(err) {\n      self.emit('error', err);\n    });\n    self.socketServer.on('close', function() {\n      self.emit('close');\n    });\n    self.socketServer.on('listening', function() {\n      self.emit('listening');\n    });\n    self.socketServer.listen(port, host);\n  }\n\n  close() {\n    Object.keys(this.clients).forEach(clientId => {\n      const client = this.clients[clientId];\n      client.end('ServerShutdown');\n    });\n    this.socketServer.close();\n  }\n}\n\nmodule.exports = Server;\n"],"sourceRoot":"/source/"}